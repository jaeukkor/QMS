package com.qms.item.service;

import java.io.OutputStream;
import java.util.List;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.qms.item.dao.ItemDao;
import com.qms.item.vo.ItemVO;
import com.qms.table.vo.item.ItemInfoVO;

@Service
public class ItemService {

	@Autowired
	ItemDao dao;
	
	public int selectTotalItemCount(ItemVO vo) throws Exception{
		return dao.selectTotalItemCount(vo);
	}
	
	public List<ItemInfoVO> selectItemList(ItemInfoVO vo) throws Exception{
		return dao.selectItemList(vo);
	}
	
	public List<ItemInfoVO> selectItemListTOexcel(ItemInfoVO vo) throws Exception{
		return dao.selectItemListTOexcel(vo);
	} //전체 아이템 리스트를 가져오기

	public static void createExcelFile(List<ItemInfoVO> itemList, OutputStream out) throws Exception {
	    Workbook workbook = new XSSFWorkbook();
	    Sheet sheet = workbook.createSheet("제품 조회");

	    // 헤더 셀 스타일 설정
	    CellStyle headerCellStyle = workbook.createCellStyle();
	    Font headerFont = workbook.createFont();
	    headerFont.setBold(true); // 굵은 글꼴
	    headerCellStyle.setFont(headerFont);
	    headerCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
	    headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	    headerCellStyle.setBorderTop(BorderStyle.THIN); // 테두리 설정
	    headerCellStyle.setBorderBottom(BorderStyle.THIN);
	    headerCellStyle.setBorderLeft(BorderStyle.THIN);
	    headerCellStyle.setBorderRight(BorderStyle.THIN);

	    Row headerRow = sheet.createRow(0);
	    
	    // 헤더 셀 생성 및 스타일 적용
	    Cell cell0 = headerRow.createCell(0);
	    cell0.setCellValue("품목코드");
	    cell0.setCellStyle(headerCellStyle);

	    Cell cell1 = headerRow.createCell(1);
	    cell1.setCellValue("품목명");
	    cell1.setCellStyle(headerCellStyle);

	    Cell cell2 = headerRow.createCell(2);
	    cell2.setCellValue("단위");
	    cell2.setCellStyle(headerCellStyle);

	    Cell cell3 = headerRow.createCell(3);
	    cell3.setCellValue("생산라인");
	    cell3.setCellStyle(headerCellStyle);

	    Cell cell4 = headerRow.createCell(4);
	    cell4.setCellValue("BOX 규격");
	    cell4.setCellStyle(headerCellStyle);
	    
	    Cell cell5 = headerRow.createCell(5);
	    cell5.setCellValue("BOX 수량");
	    cell5.setCellStyle(headerCellStyle);
	    
	    Cell cell6 = headerRow.createCell(6);
	    cell6.setCellValue("무게");
	    cell6.setCellStyle(headerCellStyle);

	    Cell cell7 = headerRow.createCell(7);
	    cell7.setCellValue("재고위치");
	    cell7.setCellStyle(headerCellStyle);
	    
	    Cell cell8 = headerRow.createCell(8);
	    cell8.setCellValue("등록일");
	    cell8.setCellStyle(headerCellStyle);

	    // 데이터 채우기
	    int rowNum = 1;
	    for (ItemInfoVO item : itemList) {
	        Row row = sheet.createRow(rowNum++);
	        row.createCell(0).setCellValue(item.getItemCd());
	        row.createCell(1).setCellValue(item.getItemName());
	        row.createCell(2).setCellValue(item.getUnitType());
	        row.createCell(3).setCellValue(item.getPlantLine());
	        row.createCell(4).setCellValue(item.getBoxType());
	        row.createCell(5).setCellValue(item.getBoxQty());
	        row.createCell(6).setCellValue(item.getWeight());
	        row.createCell(7).setCellValue(item.getLocation());
	        row.createCell(8).setCellValue(item.getRegDt());
	    }

	    workbook.write(out);
	    workbook.close();
	}


	
	//이 밑은 모달관련 함수
		public int selectDuplicateItemCdCheck(ItemVO vo) throws Exception{
			return dao.selectDuplicateItemCdCheck(vo);
		}
		
		public int insertNewItem(ItemVO vo) throws Exception{
			return dao.insertNewItem(vo);
		}
		
		public int updateItemData(ItemVO vo) throws Exception{
			return dao.updateItemData(vo);
		}
		
		public ItemVO selectItemDtlData(ItemVO vo) throws Exception{
			return dao.selectItemDtlData(vo);
		}
}	

	